// –®–∞–ø–∫–∞

import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from 'react-router-dom';

// –ö–æ–Ω—Ç–µ–∫—Å
import { useOrderNotifications } from "../contexts/OrderNotificationContext"; // –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤


// –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π
import "./../../styles/blocks/header.css";
import "./../../styles/global/page.css" // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∏–ª—å

// –ò–º–ø–æ—Ä—Ç –∏–∫–æ–Ω–æ–∫
import userIcon from './../../assets/icons/user.png';

const Header = () => {

    /* 
    ===============================
     –°–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
    ===============================
    */

    const navigate = useNavigate();
    const location = useLocation(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç

    const [selectedButton, setSelectedButton] = useState(0); // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —à–∞–ø–∫–µ

    // –î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const [userData, setUserData] = useState({
        name: localStorage.getItem('userName') || '',
        role: localStorage.getItem('userRole') || ''
    });

    const { notifications, togglePanel, isPanelOpen, clearAllNotifications, removeNotification } = useOrderNotifications(); // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ

    /* 
    ===========================
     –≠—Ñ—Ñ–µ–∫—Ç—ã
    ===========================
    */

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        if (
            location.pathname !== '/orders' &&
            !location.pathname.startsWith('/message-center') &&
            !location.pathname.startsWith('/personal-account')
        ) {
            navigate('/orders'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }, [navigate, location.pathname]);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    useEffect(() => {
        const path = location.pathname;
        if (path.startsWith('/orders')) setSelectedButton(0);
        else if (path.startsWith('/message-center')) setSelectedButton(1);
        else if (path.startsWith('/personal-account')) setSelectedButton(null); // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    }, [location.pathname]);

    // –û—á–∏—Å—Ç–∫–∞ localStorage –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        return () => {
            localStorage.removeItem('selectedButtonHeaderIndex'); // –ö–Ω–æ–ø–∫–∏ –≤ Header
        };
    }, []);

    /* 
    ===========================
     –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    ===========================
    */

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const handleNavigation = (path, shouldUpdateButton) => {
        const checkNavigation = () => {
            navigate(path);
            if (shouldUpdateButton) {
                const index = ['/orders', '/message-center'].indexOf(path);
                setSelectedButton(index);
                localStorage.setItem('selectedButtonHeaderIndex', index);
            }
            else { //  –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º "/personal-account", —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                setSelectedButton(null);
                localStorage.setItem('selectedButtonHeaderIndex', selectedButton);
            }
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (sessionStorage.getItem('isDirty') === 'true') { // –ù–∞ false isDirty –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –∏ —É–¥–∞–ª–∏—Ç —Å–æ—Å—Ç–æ–Ω–∏–µ isDirty –≤ localStorage
            // setPendingNavigation(() => checkNavigation);
            // setShowNavigationConfirmModal(true);
        } else {
            checkNavigation();
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
    const handleLogoClick = () => handleNavigation('/orders', true);
    const handleUserClick = () => handleNavigation('/personal-account', false);
    const handleMenuButton = (index) =>
        handleNavigation(['/orders', '/message-center'][index], true);

    /* 
    ===========================
     –†–µ–Ω–¥–µ—Ä
    ===========================
    */

    return (
        <div>
            <header className="header-container">
                <div
                    className="header-logo"
                    onClick={handleLogoClick}
                >
                    –í–∫—É—Å–Ω–æ–†–æ–ª–ª.–ú–µ–Ω–µ–¥–∂–µ—Ä
                </div>

                <nav style={{ display: 'flex', gap: '10px', justifyContent: 'center', margin: '0', padding: '0' }}>
                    {['–ó–∞–∫–∞–∑—ã', '–¶–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π'].map((label, index) => (
                        <button
                            className="header-nav-button"
                            key={index}
                            onClick={() => handleMenuButton(index)}
                            style={{
                                backgroundColor: selectedButton === index ? 'gray' : 'transparent',
                                color: selectedButton === index ? 'white' : 'black'
                            }}
                        >
                            {label}
                        </button>
                    ))}
                </nav>

                <div className="header-icons">
                    <div className="header-user-details">
                        <span className="header-user-name">{userData.name}</span>
                        <span className="header-user-role">{userData.role}</span>
                    </div>

                    {/* –õ–∏—á–Ω—ã–π—ã –∫–∞–±–∏–Ω–µ—Ç */}
                    <img
                        src={userIcon}
                        alt="User"
                        onClick={handleUserClick}
                    />

                    {/* –®—Ç–æ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
                    <div className="header-notification-bell" onClick={togglePanel}>
                        üîî
                        {notifications.length > 0 && (
                            <span className="header-notification-badge">
                                {notifications.length}
                            </span>
                        )}
                    </div>

                    {isPanelOpen && (
                        <div className="order-notification-panel">
                            <div className="order-notification-header">
                                <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö</h3>
                                <button
                                    onClick={clearAllNotifications}
                                    className="order-notification-clear-all"
                                >
                                    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                                </button>
                            </div>

                            <div className="order-notification-list">
                                {notifications.map(notification => (
                                    <div key={notification.id} className="order-notification-item">
                                        <div className="order-notification-content">
                                            <span>{notification.text}</span>
                                            <small>{notification.date}</small>
                                        </div>
                                        <button
                                            onClick={() => removeNotification(notification.id)}
                                            className="order-notification-close"
                                        >
                                            √ó
                                        </button>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                </div>
            </header>
        </div>
    );
}

export default Header;